PackageHeader(com.pibity.erp.services)
importList
  Import(com.google.gson.JsonArray)
  Import(com.google.gson.JsonObject)
  Import(com.pibity.erp.commons.constants.GLOBAL_TYPE)
  Import(com.pibity.erp.commons.constants.TypeConstants)
  Import(com.pibity.erp.commons.exceptions.CustomJsonException)
  Import(com.pibity.erp.commons.utils.*)
  Import(com.pibity.erp.entities.*)
  Import(com.pibity.erp.entities.permission.TypePermission)
  Import(com.pibity.erp.repositories.jpa.ValueJpaRepository)
  Import(com.pibity.erp.repositories.jpa.VariableAssertionJpaRepository)
  Import(com.pibity.erp.repositories.jpa.VariableJpaRepository)
  Import(com.pibity.erp.repositories.jpa.VariableListJpaRepository)
  Import(com.pibity.erp.repositories.query.VariableRepository)
  Import(org.springframework.stereotype.Service)
  Import(org.springframework.transaction.annotation.Transactional)
KlassDeclaration(class VariableService)
  KlassAnnotation(Service)
  KlassDeclaration(constructor)
    KlassDeclaration(val variableRepository VariableRepository)
    KlassDeclaration(val variableJpaRepository VariableJpaRepository)
    KlassDeclaration(val variableListJpaRepository VariableListJpaRepository)
    KlassDeclaration(val userService UserService)
    KlassDeclaration(val valueJpaRepository ValueJpaRepository)
    KlassDeclaration(val variableAssertionJpaRepository VariableAssertionJpaRepository)
  classBody
    KlassDeclaration(fun createVariable Pair<Variable, TypePermission>)
      KlassAnnotation(Transactional)
        KlassDeclaration(argument rollbackFor)
          collectionLiteral
            LSQUARE >>>[<<< (DEFAULT_TOKEN_CHANNEL)
            expression
              callableReference
                receiverType
                  KlassIdentifier(CustomJsonException)
                COLONCOLON >>>::<<< (DEFAULT_TOKEN_CHANNEL)
                KlassIdentifier(class)
            RSQUARE >>>]<<< (DEFAULT_TOKEN_CHANNEL)
      KlassDeclaration(parameter jsonParams JsonObject)
      KlassDeclaration(parameter variableSuperList VariableList)
        literalConstant
          NullLiteral >>>null<<< (DEFAULT_TOKEN_CHANNEL)
      KlassDeclaration(parameter variableSubList VariableList)
        literalConstant
          NullLiteral >>>null<<< (DEFAULT_TOKEN_CHANNEL)
      KlassDeclaration(parameter variableTypePermission TypePermission)
        literalConstant
          NullLiteral >>>null<<< (DEFAULT_TOKEN_CHANNEL)
    KlassDeclaration(fun updateVariable Triple<Variable, Map<Value, MutableSet<Value>>, Map<VariableAssertion, MutableSet<Value>>>)
      KlassAnnotation(Transactional)
        KlassDeclaration(argument rollbackFor)
          collectionLiteral
            LSQUARE >>>[<<< (DEFAULT_TOKEN_CHANNEL)
            expression
              callableReference
                receiverType
                  KlassIdentifier(CustomJsonException)
                COLONCOLON >>>::<<< (DEFAULT_TOKEN_CHANNEL)
                KlassIdentifier(class)
            RSQUARE >>>]<<< (DEFAULT_TOKEN_CHANNEL)
      KlassDeclaration(parameter jsonParams JsonObject)
      KlassDeclaration(parameter referencedKeyVariable Variable)
        literalConstant
          NullLiteral >>>null<<< (DEFAULT_TOKEN_CHANNEL)
      KlassDeclaration(parameter variableTypePermission TypePermission)
        literalConstant
          NullLiteral >>>null<<< (DEFAULT_TOKEN_CHANNEL)
      KlassDeclaration(parameter variableSuperList VariableList)
        literalConstant
          NullLiteral >>>null<<< (DEFAULT_TOKEN_CHANNEL)
    KlassDeclaration(fun recomputeDependentFormulaValues)
      KlassAnnotation(Transactional)
        KlassDeclaration(argument rollbackFor)
          collectionLiteral
            LSQUARE >>>[<<< (DEFAULT_TOKEN_CHANNEL)
            expression
              callableReference
                receiverType
                  KlassIdentifier(CustomJsonException)
                COLONCOLON >>>::<<< (DEFAULT_TOKEN_CHANNEL)
                KlassIdentifier(class)
            RSQUARE >>>]<<< (DEFAULT_TOKEN_CHANNEL)
      KlassDeclaration(parameter dependentFormulaValues MutableMap<Value, MutableSet<Value>>)
      KlassDeclaration(parameter dependentAssertions Map<VariableAssertion, MutableSet<Value>>)
    KlassDeclaration(fun evaluateAssertions)
      KlassDeclaration(parameter dependentAssertions Map<VariableAssertion, MutableSet<Value>>)
