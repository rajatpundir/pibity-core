/* 
 * Copyright (C) 2020-2021 Pibity Infotech Private Limited - All Rights Reserved
 * Unauthorized copying of this file, via any medium is strictly prohibited
 * Proprietary and confidential
 * THIS IS UNPUBLISHED PROPRIETARY CODE OF PIBITY INFOTECH PRIVATE LIMITED
 * The copyright notice above does not evidence any actual or intended publication of such source code.
 */

package com.pibity.erp.entities

import com.pibity.erp.serializers.serialize
import java.io.Serializable
import java.sql.Timestamp
import javax.persistence.*

@Entity
@Table(name = "variable", schema = "inventory", uniqueConstraints = [UniqueConstraint(columnNames = ["super_list_id", "type_id", "name"])])
data class Variable(

    @Id
    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "variable_generator")
    @SequenceGenerator(name = "variable_generator", sequenceName = "variable_sequence")
    val id: Long = -1,

    @ManyToOne
    val superList: VariableList,

    @ManyToOne
    val type: Type,

    @Column(name = "name", nullable = false)
    var name: String,

    @Version
    @Column(name = "version", nullable = false)
    val version: Timestamp = Timestamp(System.currentTimeMillis()),

    @OneToOne
    var subList: VariableList,

    @Column(name = "auto_generated_id", nullable = false)
    val autoGeneratedId: Int = 0,

    @Column(name = "reference_count", nullable = false)
    var referenceCount: Long = 0,

    @Column(name = "active", nullable = false)
    var active: Boolean = true,

    @OneToMany(mappedBy = "variable", cascade = [CascadeType.ALL])
    val values: MutableSet<Value> = HashSet(),

    @OneToMany(mappedBy = "variable", cascade = [CascadeType.ALL])
    val variableAssertions: MutableSet<VariableAssertion> = HashSet(),

    @OneToMany(mappedBy = "referencedVariable", cascade = [CascadeType.ALL])
    val referencingValues: Set<Value> = HashSet(),

    // Use this to find out which lists contain this variable
    @ManyToMany(mappedBy = "variables")
    val referencingLists: Set<VariableList> = HashSet(),

    @ManyToMany(mappedBy = "variableDependencies", cascade = [CascadeType.ALL])
    val dependentValues: MutableSet<Value> = HashSet(),

    @ManyToMany(mappedBy = "variableDependencies", cascade = [CascadeType.ALL])
    val dependentAssertions: MutableSet<VariableAssertion> = HashSet()

) : Serializable {

  override fun equals(other: Any?): Boolean {
    other ?: return false
    if (this === other) return true
    other as Variable
    return this.superList == other.superList && this.type == other.type && this.name == other.name
  }

  override fun hashCode(): Int = (id % Int.MAX_VALUE).toInt()

  override fun toString(): String = serialize(this).toString()
}
